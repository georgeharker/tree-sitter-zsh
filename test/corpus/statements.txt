================================================================================
Test commands with regexes
================================================================================

[[ "35d8b" =~ ^[0-9a-fA-F] ]]
[[ $CMD =~ \(^\|\;\)update_terminal_cwd\(\$\|\;\) ]]
[[ ! " ${completions[*]} " =~ " $alias_cmd " ]]
! [[ "$a" =~ ^a\|b\ *c\|d$ ]]
[[ "$1" =~ ^${var}${var}*=..* ]]
[[ "$1" =~ ^\-${var}+ ]]
[[ ${var1} == *${var2}* ]]
[[ "$server" =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]
[[ "$primary_wins" =~ \([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\) ]]
[[ -f ${x} && $(od -t x1 -N 4 "${x}") == *"7f 45 4c 46"* ]]
[[ ${PV} == 99999999\$ ]]
[[ " ${REPLACING_VERSIONS} " == *\ ${PVR}\ * ]]
[[ ${file} == @(*${GENTOO_PATCH_NAME}.tar.xz|*.asc|*.sig) ]]
[[ $RUBY_TARGETS != *$( eselect ruby show | awk 'NR==2' | tr  -d ' '  )* ]]
[[ "${skip_files[*]} " =~ "test.tmp" ]]
[[ ' boop xyz' =~ ' boop '(.*)$ ]]
[[ $b =~ foo* ]]



--------------------------------------------------------------------------------

(program
  (test_command
    (binary_expression
      left: (string
        (string_content))
      right: (regex)))
  (test_command
    (binary_expression
      left: (variable_ref
        (simple_variable_name))
      right: (regex)))
  (test_command
    (binary_expression
      left: (unary_expression
        (string
          (expansion
            name: (simple_variable_name)
            index: (array_star))))
      right: (string
        (variable_ref
          (simple_variable_name)))))
  (negated_command
    (test_command
      (binary_expression
        left: (string
          (variable_ref
            (simple_variable_name)))
        right: (regex))))
  (test_command
    (binary_expression
      left: (string
        (variable_ref
          (special_variable_name)))
      right: (regex)))
  (test_command
    (binary_expression
      left: (string
        (variable_ref
          (special_variable_name)))
      right: (regex)))
  (test_command
    (binary_expression
      left: (expansion
        name: (simple_variable_name))
      right: (extglob_pattern)
      right: (expansion
        name: (simple_variable_name))
      right: (extglob_pattern)))
  (test_command
    (binary_expression
      left: (string
        (variable_ref
          (simple_variable_name)))
      right: (regex)))
  (test_command
    (binary_expression
      left: (string
        (variable_ref
          (simple_variable_name)))
      right: (regex)))
  (test_command
    (binary_expression
      left: (unary_expression
        operator: (test_operator)
        (expansion
          name: (simple_variable_name)))
      right: (binary_expression
        left: (command_substitution
          (command
            name: (command_name
              (word))
            argument: (word)
            argument: (word)
            argument: (word)
            argument: (number)
            argument: (string
              (expansion
                name: (simple_variable_name)))))
        right: (extglob_pattern)
        right: (string
          (string_content))
        right: (extglob_pattern))))
  (test_command
    (binary_expression
      left: (expansion
        name: (simple_variable_name))
      right: (word)))
  (test_command
    (binary_expression
      left: (string
        (expansion
          name: (simple_variable_name)))
      right: (extglob_pattern)
      right: (expansion
        name: (simple_variable_name))
      right: (extglob_pattern)))
  (test_command
    (binary_expression
      left: (expansion
        name: (simple_variable_name))
      right: (extglob_pattern)
      right: (expansion
        name: (simple_variable_name))
      right: (extglob_pattern)))
  (test_command
    (binary_expression
      left: (variable_ref
        (simple_variable_name))
      right: (extglob_pattern)
      right: (command_substitution
        (pipeline
          (command
            name: (command_name
              (word))
            argument: (word)
            argument: (word))
          (command
            name: (command_name
              (word))
            argument: (raw_string))
          (command
            name: (command_name
              (word))
            argument: (word)
            argument: (raw_string))))
      right: (extglob_pattern)))
  (test_command
    (binary_expression
      left: (string
        (expansion
          name: (simple_variable_name)
          index: (array_star)))
      right: (string
        (string_content))))
  (test_command
    (binary_expression
      left: (raw_string)
      right: (regex)))
  (test_command
    (binary_expression
      left: (variable_ref
        (simple_variable_name))
      right: (regex))))

==================================================
Test commands with regexes - unprotected double minus
==================================================
[[ $1 == -- ]]

--------------------------------------------------------------------------------

(program
  (test_command
    (binary_expression
      left: (variable_ref
        (special_variable_name))
      right: (extglob_pattern))))

==================================================
For loop without in
==================================================

for each ( "$diffs[@]" )
do
    warn "${each}"
done

--------------------------------------------------------------------------------

(program
  (terse_for_statement
    variable: (simple_variable_name)
    (string
      (variable_ref
        (simple_variable_name))
      (string_content))
    body: (do_group
      (command
        name: (command_name
          (word))
        argument: (string
          (expansion
            name: (simple_variable_name)))))))
